name: Testing Order of Operations

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Step 1: PHP_CodeSniffer
  php_codesniffer:
    name: PHP_CodeSniffer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - name: Install PHP_CodeSniffer if not already installed
        run: |
          if [ ! -f vendor/bin/phpcs ]; then
            composer require --dev squizlabs/php_codesniffer
          fi
      - name: Run PHP_CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 -n app routes config database tests

  # Step 2: PHPStan
  phpstan:
    name: PHPStan Analysis
    runs-on: ubuntu-latest
    needs: php_codesniffer
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress
      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=512M

  # Step 3: ESLint (Vue.js)
  eslint:
    name: ESLint (Vue.js)
    runs-on: ubuntu-latest
    needs: phpstan
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint

  # Step 4: Pest
  pest:
    name: Pest Tests
    runs-on: ubuntu-latest
    needs: eslint
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Run Migrations
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan migrate --force
      - name: Run Pest Tests
        run: vendor/bin/pest

  # Step 5: Jest (Vue.js)
  jest:
    name: Jest Tests (Vue.js)
    runs-on: ubuntu-latest
    needs: pest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run Jest Tests
        run: npm test

  # Step 6: Dusk (PHP Laravel E2E)
  dusk:
    name: Laravel Dusk Tests
    runs-on: ubuntu-latest
    needs: jest
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick
          coverage: none
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Run Migrations
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan migrate --force
      - name: Publish Dusk Assets
        run: |
          php artisan vendor:publish --provider="Laravel\Dusk\DuskServiceProvider"
          mkdir -p tests/Browser/screenshots tests/Browser/console

      - name: Install Firefox ESR
        run: |
          sudo apt-get update
          sudo add-apt-repository -y ppa:mozillateam/ppa
          sudo apt-get update
          sudo apt-get install -y firefox-esr
          echo "Firefox ESR binary path: $(which firefox-esr)"
          firefox-esr --version

      - name: Install Geckodriver
        run: |
          GECKODRIVER_VERSION="v0.33.0"
          wget https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
          tar -xvzf geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver

      - name: Start Geckodriver
        run: |
          # Use a specific port and verify it's available
          GECKODRIVER_PORT=4444
          
          # Check if port is already in use
          if netstat -tuln | grep -q ":${GECKODRIVER_PORT} "; then
            echo "Port ${GECKODRIVER_PORT} is already in use. Trying to free it..."
            sudo fuser -k ${GECKODRIVER_PORT}/tcp || true
            sleep 2
          fi
          
          # Start Geckodriver
          geckodriver --port ${GECKODRIVER_PORT} > /tmp/geckodriver.log 2>&1 &
          sleep 3
          
          # Verify Geckodriver is running
          if curl -s http://127.0.0.1:${GECKODRIVER_PORT}/status > /dev/null; then
            echo "Geckodriver is running successfully on port ${GECKODRIVER_PORT}"
          else
            echo "Geckodriver failed to start. See log:"
            cat /tmp/geckodriver.log
            exit 1
          fi

      - name: Run Laravel Server
        run: php artisan serve --no-reload &
        
      - name: Wait for server with retry logic
        run: |
          echo "Waiting for Laravel server to start..."
          max_retries=5
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if curl -s http://127.0.0.1:8000 > /dev/null; then
              echo "Laravel server is running"
              break
            else
              echo "Attempt $((retry_count+1))/$max_retries: Server not ready, waiting..."
              sleep 5
              retry_count=$((retry_count+1))
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "Failed to connect to Laravel server after $max_retries attempts"
            exit 1
          fi

      - name: Run Dusk Tests with Firefox
        env:
          APP_URL: "http://127.0.0.1:8000"
          DUSK_DRIVER_URL: "http://127.0.0.1:4444"
        run: |
          # Create Firefox wrapper script
          FIREFOX_WRAPPER="/tmp/firefox-wrapper.sh"
          echo "Creating Firefox wrapper script at ${FIREFOX_WRAPPER}..."
          cat > ${FIREFOX_WRAPPER} << 'EOF'
          #!/bin/bash
          # Firefox wrapper script for Dusk tests
          exec /usr/bin/firefox-esr "$@"
          EOF
          chmod +x ${FIREFOX_WRAPPER}
          echo "Firefox wrapper script created successfully."
          
          # Create custom phpunit.dusk.xml with explicit configuration for Firefox
          cat > phpunit.dusk.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
                  bootstrap="tests/bootstrap.php"
                  colors="true">
              <testsuites>
                  <testsuite name="Browser">
                      <directory>tests/Browser</directory>
                  </testsuite>
              </testsuites>
              <php>
                  <env name="APP_ENV" value="testing"/>
                  <env name="DUSK_DRIVER_URL" value="http://127.0.0.1:4444"/>
                  <env name="FIREFOX_BINARY_PATH" value="/usr/bin/firefox-esr"/>
              </php>
          </phpunit>
          EOF
          
          # Set environment variable for Firefox binary path
          export FIREFOX_BINARY_PATH="/usr/bin/firefox-esr"
          echo "Firefox binary path: ${FIREFOX_BINARY_PATH}"
          
          # Run tests with custom configuration
          php artisan dusk --configuration=phpunit.dusk.xml

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: tests/Browser/screenshots
      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: console
          path: tests/Browser/console
