name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  phpstan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql
          coverage: none
          
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        
      - name: Run PHPStan
        run: vendor/bin/phpstan analyse

  dusk-tests:
    runs-on: ubuntu-latest
    needs: phpstan
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, zip
          coverage: none
      
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress
      
      - name: Prepare Laravel Application
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear
          php artisan migrate:fresh --seed
      
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
          php artisan migrate --env=testing
      
      - name: Publish Dusk Assets
        run: |
          php artisan vendor:publish --provider="Laravel\Dusk\DuskServiceProvider"
          mkdir -p tests/Browser/screenshots tests/Browser/console

      - name: Install Firefox
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox

      - name: Install Geckodriver
        run: |
          GECKODRIVER_VERSION="v0.33.0"
          wget https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
          tar -xvzf geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver

      - name: Start Geckodriver
        run: |
          # Use a specific port and verify it's available
          GECKODRIVER_PORT=4444
          
          # Check if port is already in use
          if netstat -tuln | grep -q ":${GECKODRIVER_PORT} "; then
            echo "Port ${GECKODRIVER_PORT} is already in use. Trying to free it..."
            sudo fuser -k ${GECKODRIVER_PORT}/tcp || true
            sleep 2
          fi
          
          # Start Geckodriver
          geckodriver --port ${GECKODRIVER_PORT} > /tmp/geckodriver.log 2>&1 &
          sleep 3
          
          # Verify Geckodriver is running
          if curl -s http://localhost:${GECKODRIVER_PORT}/status > /dev/null; then
            echo "Geckodriver is running successfully on port ${GECKODRIVER_PORT}"
          else
            echo "Geckodriver failed to start. See log:"
            cat /tmp/geckodriver.log
            exit 1
          fi

      - name: Run Laravel Server
        run: php artisan serve --no-reload &
        
      - name: Wait for server
        run: |
          echo "Waiting for Laravel server to start..."
          sleep 5
          curl -s http://127.0.0.1:8000 > /dev/null
          echo "Laravel server is running"

      - name: Run Dusk Tests with Firefox
        env:
          APP_URL: "http://127.0.0.1:8000"
          DUSK_DRIVER_URL: "http://localhost:4444"
        run: |
          # Create custom phpunit.dusk.xml with explicit configuration for Firefox
          cat > phpunit.dusk.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
                  bootstrap="tests/bootstrap.php"
                  colors="true">
              <testsuites>
                  <testsuite name="Browser">
                      <directory>tests/Browser</directory>
                  </testsuite>
              </testsuites>
              <php>
                  <env name="APP_ENV" value="testing"/>
                  <env name="DUSK_DRIVER_URL" value="http://localhost:4444"/>
              </php>
          </phpunit>
          EOF
          
          # Run tests with custom configuration
          php artisan dusk --configuration=phpunit.dusk.xml

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: tests/Browser/screenshots

      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: console
          path: tests/Browser/console
